import groovy.swing.SwingBuilder

buildscript {
  repositories {
    mavenCentral()
    mavenLocal()  //Only for development purpose: you can safely remove this line on your app.
  }
  dependencies {
    classpath 'com.fernandocejas:gandalf:0.1.0'
  }
}

repositories {
  mavenCentral()
  mavenLocal()    //Only for development purpose: you can safely remove this line on your app.
}

apply plugin: 'com.android.application'
apply plugin: 'com.fernandocejas.gandalf'

android {
  compileSdkVersion 19
  buildToolsVersion "20.0.0"

  defaultConfig {
    applicationId "com.example.gandalf"
    minSdkVersion 15
    targetSdkVersion 19
    versionCode 1
    versionName "1.0"
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/ASL2.0'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/LICENSE'
  }

  lintOptions {
    abortOnError false
    disable 'InvalidPackage' // Some libraries have issues with this
  }

  signingConfigs {
    release {
      storeFile file("../distribution/android10.keystore")
      storePassword = ""
      keyAlias = ""
      keyPassword = ""
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix ".debug"
      versionNameSuffix "-debug"
    }
    release {
      signingConfig signingConfigs.release
    }
  }
}

gradle.taskGraph.whenReady { taskGraph ->
  if (taskGraph.hasTask(assembleRelease)) {
    Console console = System.console()
    def storePassword = ""
    def keyAlias = ""
    def keyPassword = ""

    if (console != null) {
      console.printf "\n----------------------------"
      console.printf "\nSigning Android Release APK"
      console.printf "\n----------------------------"

      storePassword = console.readPassword("\nKey Store Password: ")
      keyAlias = console.readPassword("Key Alias: ")
      keyPassword = console.readPassword("Key Password: ")
    } else {
      new SwingBuilder().edt {
        dialog(modal: true, title: "Sign APK", alwaysOnTop: true,
            resizable: false, locationRelativeTo: null, pack: true, show: true) {
          vbox {
            label(text: "Key Store Password: ")
            inputStorePassword = passwordField()
            label(text: "Key Alias: ")
            inputKeyAlias = passwordField()
            label(text: "Key Password: ")
            inputKeyPassword = passwordField()
            button(defaultButton: true, text: 'OK', actionPerformed: {
              storePassword = inputStorePassword.password;
              keyAlias = inputKeyAlias.password;
              keyPassword = inputKeyPassword.password;
              dispose();
            })
          }
        }
      }
    }

    if (storePassword.toString().empty) {
      throw new InvalidUserDataException("EMPTY Store Password")
    }
    if (keyAlias.toString().empty) {
      throw new InvalidUserDataException("EMPTY Key Alias")
    }
    if (keyPassword.toString().empty) {
      throw new InvalidUserDataException("EMPTY Key Password")
    }

    android.signingConfigs.release.storePassword = storePassword.toString()
    android.signingConfigs.release.keyAlias = keyAlias.toString()
    android.signingConfigs.release.keyPassword = keyPassword.toString()
  }
}