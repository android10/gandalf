import com.android.build.gradle.LibraryPlugin
import org.aspectj.bridge.IMessage
import org.aspectj.bridge.MessageHandler
import org.aspectj.tools.ajc.Main

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.android.tools.build:gradle:0.13.2'
    classpath 'org.aspectj:aspectjtools:1.8.1'
  }
}

repositories {
  mavenCentral()
}

apply plugin: 'com.android.library'

android {
  compileSdkVersion 19
  buildToolsVersion '20.0.0'

  defaultConfig {
    applicationId "com.fernandocejas.android10.gandalf"
    versionCode 1
    versionName "${VERSION_NAME}"
    minSdkVersion 15
    targetSdkVersion 19
  }

  lintOptions {
    abortOnError false
  }
}

dependencies {
  compile 'org.aspectj:aspectjrt:1.8.1'
}

android.libraryVariants.all { variant ->
  LibraryPlugin plugin = project.plugins.getPlugin(LibraryPlugin)
  JavaCompile javaCompile = variant.javaCompile
  javaCompile.doLast {
    String[] args = ["-showWeaveInfo",
                     "-1.5",
                     "-inpath", javaCompile.destinationDir.toString(),
                     "-aspectpath", javaCompile.classpath.asPath,
                     "-d", javaCompile.destinationDir.toString(),
                     "-classpath", javaCompile.classpath.asPath,
                     "-bootclasspath", plugin.project.android.bootClasspath.join(
        File.pathSeparator)]

    final MessageHandler handler = new MessageHandler(true);
    final def log = project.logger
    new Main().run(args, handler)
    for (IMessage message : handler.getMessages(null, true)) {
      switch (message.getKind()) {
        case IMessage.ABORT:
        case IMessage.ERROR:
        case IMessage.FAIL:
          log.error message.message, message.thrown
          break;
        case IMessage.INFO:
          log.info message.message, message.thrown
          break;
        case IMessage.DEBUG:
          log.debug message.message, message.thrown
          break;
      }
    }
  }

  variant.outputs.each { output ->
    if (output.outputFile != null && output.outputFile.name.endsWith('.aar')) {
      def file = output.outputFile
      def fileName = file.name.replace("${variant.buildType.name}.aar", "${VERSION_NAME}.aar")
      output.outputFile = new File(file.parent, fileName)
    }
  }
}

task installLibrary(type: Exec, dependsOn: assemble) {
  executable = 'mvn'
  args = ["install:install-file",
          "-DgroupId=${GROUP_ID}",
          "-DartifactId=${ARTIFACT_ID}",
          "-Dversion=${VERSION_NAME}",
          "-Dpackaging=aar",
          "-Dfile=build/outputs/aar/gandalf-library-${VERSION_NAME}.aar"]
}